import {
  Directive, ComponentFactoryResolver, ComponentRef, Input,
  OnChanges, OnInit, Type, ViewContainerRef, Compiler
} from '@angular/core';
import { DynamicBuilder } from '../components/dynamic/dynamic.component';

@Directive({
  selector: '[dynamicDirective]',
  providers: [
    DynamicBuilder
  ]
})
export class DynamicDirective implements OnChanges, OnInit {
  @Input()
  config: any;

  @Input()
  template: any;

  @Input()
  service: any;

  @Input()
  props: any;

  component: ComponentRef<any>;

  public templates = `
    <span>Dynamic property hello: {{props?.hello}}<span><br>
    <span>Dynamic property world: {{props?.world}}<span><br>
    <button (click)="svc.test()">test</button><br>
    <button (click)="svc.test1(1, 2, 3, 4)">test1 with args</button><br>
    <button (click)="svc.test2($event)">test $event</button><br>
  `;

  constructor(
    private builder: DynamicBuilder,
    private resolver: ComponentFactoryResolver,
    private container: ViewContainerRef,
    private compiler: Compiler
  ) { }

  ngOnInit() {
    console.log(this.props);
    // Uses the DynamicBuilder component which dynamically generates custom component
    // We load the template generated by Handlebar from NodeJS API
    const dComp = this.builder.genComponent(this.template);

    // Uses angular module Compiler to dynamically generate module with custom component
    // and load it to declare the custom component
    const mod = this.compiler.compileModuleAndAllComponentsSync(dComp.DynamicModule);

    // We look for our dynamic custom component in the component factory and return it
    const factory = mod.componentFactories.find((comp) => comp.componentType === dComp.DynamicComponent);

    // We use ViewContainerRef to create and load the dynamic custom component
    this.component = this.container.createComponent(factory);

    // We set the dynamic custom component objects
    this.component.instance.props = this.props;
    this.component.instance.config = this.config;
    this.component.instance.svc = this.service;

  }

  ngOnChanges() {
    //
  }

}
